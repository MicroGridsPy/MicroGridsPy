import os
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from microgridspy.model.utils import read_csv_data
from config.path_manager import PathManager

# Function to load CSV files and identify user categories from the demand folder
def initialize_user_categories(folder: str) -> dict:
    """Load CSV files from a given folder and return a dictionary with user categories as keys."""
    csv_files = [f for f in os.listdir(folder) if f.endswith('.csv')]
    
    if not csv_files:
        st.error("No CSV files found in the specified folder.")
        return {}

    data = {}
    for file in csv_files:
        category_name = file.replace('.csv', '')  # Extract category name from the file name
        if category_name == "Aggregated Demand":
            continue  # Skip the aggregated demand file
        else:
            file_path = os.path.join(folder, file)
            try:
                df = read_csv_data(file_path)
                df.iloc[:, 1:] = df.iloc[:, 1:] / 1000  # Convert Wh to kWh
                data[category_name] = df
            except Exception as e:
                st.error(f"Error loading {file}: {e}")
    return data

# Function to plot total yearly energy for each category
def plot_yearly_energy(data: dict):
    """
    Plot total yearly energy consumption for each user category.
    """
    yearly_energy = {}
    for category, df in data.items():
        yearly_energy[category] = df.iloc[:, 1:].sum(axis=0) / 1000  # Sum energy in MWh for each year

    energy_df = pd.DataFrame(yearly_energy)
    energy_df.index = df.columns[1:]  # Set the years as index
    
    fig, ax = plt.subplots(figsize=(10, 6))
    energy_df.plot(kind='bar', ax=ax)
    ax.set_xlabel('Years')
    ax.set_ylabel('Total Energy (MWh)')
    ax.set_title('Total Yearly Energy by User Category')
    st.pyplot(fig)

# Function to calculate profit for each category based on tariff settings
def calculate_profit(data: dict, tariff_settings: dict) -> pd.DataFrame:
    """
    Calculate the yearly profit for each user category based on selected tariff settings.
    Returns a DataFrame with profit data for each category and year.
    """
    total_profit = pd.DataFrame()
    
    for category, df in data.items():
        energy = df.iloc[:, 1:].sum(axis=0)  # Total energy for each year in kWh
        years = df.columns[1:]  # Get year columns
        
        if tariff_settings[category]['type'] == 'consumption':
            tariff = tariff_settings[category]['value']
            profit = energy * tariff
        
        elif tariff_settings[category]['type'] == 'fixed':
            tariff = tariff_settings[category]['value']
            profit = np.repeat(tariff * 12, len(years))  # Fixed monthly tariff multiplied by 12 for yearly profit
        
        elif tariff_settings[category]['type'] == 'threshold':
            fixed_value = tariff_settings[category]['fixed_value']
            threshold = tariff_settings[category]['threshold']
            consumption_tariff = tariff_settings[category]['consumption_tariff']

            monthly_energy = energy / 12  # Approximate monthly energy usage
            profit = np.where(monthly_energy <= threshold, 
                              fixed_value * 12, 
                              fixed_value * 12 + (monthly_energy - threshold) * 12 * consumption_tariff)
        
        # Store profit in a DataFrame with years as index
        total_profit[category] = profit

    total_profit.index = years
    return total_profit

# Function to plot yearly profit with cumulative bar chart
def plot_yearly_profit(profit_data: pd.DataFrame, currency: str):
    """
    Plot yearly profit for each user category as a stacked bar chart.
    """
    fig, ax = plt.subplots(figsize=(10, 6))
    profit_data.plot(kind='bar', stacked=True, ax=ax)
    ax.set_xlabel('Years')
    ax.set_ylabel(f'Total Profit ({currency})')
    ax.set_title('Yearly Profit by User Category')
    st.pyplot(fig)

# Main function to run the Streamlit app page for project profitability
def project_profitability():
    """Main function to calculate and display the project profitability page in Streamlit."""

    st.title("Mini-Grid Project Profitability")
    st.write("""
    In this page, you can calculate and visualize the total profit generated by mini-grids based on hourly load demand data 
    from different user categories. The application dynamically reads CSV files from the demand folder, allows users to 
    input tariffs for each category, and displays the resulting total and yearly profits.
    """)

    # Load user category data from the demand folder
    user_category_data = initialize_user_categories(PathManager.DEMAND_FOLDER_PATH)
    
    if not user_category_data:
        return  # If no data, exit the function

    # Plot total yearly energy
    plot_yearly_energy(user_category_data)

    currency = st.session_state.get('currency', 'USD')
    time_horizon = st.session_state.get("time_horizon", 20)
    tariff_settings = {}
    
    st.header("Tariff Settings")
    tariff_models = ['Tariff per consumption', 'Fixed tariff', 'Fixed tariff up to threshold']

    # Dynamic input fields for tariffs
    for category in user_category_data.keys():
        st.subheader(f"{category}")
        tariff_type = st.selectbox(f"Select tariff model for {category}", tariff_models)
        
        if tariff_type == 'Tariff per consumption':
            tariff_value = st.number_input(f"Enter tariff per kWh for {category} ({currency}/kWh)", value=0.0)
            tariff_settings[category] = {'type': 'consumption', 'value': tariff_value}
        
        elif tariff_type == 'Fixed tariff':
            fixed_value = st.number_input(f"Enter fixed tariff for {category} ({currency}/month)", value=0.0)
            tariff_settings[category] = {'type': 'fixed', 'value': fixed_value}
        
        elif tariff_type == 'Fixed tariff up to threshold':
            fixed_value = st.number_input(f"Enter fixed tariff for {category} ({currency}/month)", value=0.0)
            threshold = st.number_input(f"Enter energy threshold for {category} (kWh/month)", value=0.0)
            consumption_tariff = st.number_input(f"Tariff per kWh after threshold ({currency}/kWh)", value=0.0)
            tariff_settings[category] = {
                'type': 'threshold',
                'fixed_value': fixed_value,
                'threshold': threshold,
                'consumption_tariff': consumption_tariff
            }

    # Profit calculation section
    profit_data = calculate_profit(user_category_data, tariff_settings)
    
    # Calculate total profit in kUSD
    total_profit = profit_data.sum().sum() / 1000  # Convert to kUSD

    # Display total profit with the time horizon
    st.header("Profit Analysis Visualization")
    st.metric(label=f"Total Profit over the {time_horizon} years of time horizon", value=f"{total_profit:,.2f} k{currency}")

    # Display yearly total profit in a table
    yearly_total_profit = profit_data.sum(axis=1) / 1000  # Convert yearly profits to kUSD
    yearly_total_profit_df = pd.DataFrame(yearly_total_profit, columns=[f'Total Profit (k{currency})'])
    st.write(f"Yearly total profit (in k{currency}):")
    st.dataframe(yearly_total_profit_df)
    
    # Visualization section
    plot_yearly_profit(profit_data, currency)

    if st.button("Back"):
        st.session_state.page = "Results"
        st.rerun()
