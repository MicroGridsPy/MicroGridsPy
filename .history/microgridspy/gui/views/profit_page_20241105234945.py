import os
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from microgridspy.model.utils import read_csv_data
from config.path_manager import PathManager
from microgridspy.model.model import Model
from microgridspy.post_process.cost_calculations import calculate_actualized_investment_cost

# Function to load CSV files and identify user categories from the demand folder
def initialize_user_categories(folder: str) -> dict:
    """Load CSV files from a given folder and return a dictionary with user categories as keys."""
    csv_files = [f for f in os.listdir(folder) if f.endswith('.csv')]
    
    if not csv_files:
        st.error("No CSV files found in the specified folder.")
        return {}

    data = {}
    for file in csv_files:
        category_name = file.replace('.csv', '')  # Extract category name from the file name
        if category_name == "Aggregated Demand":
            continue  # Skip the aggregated demand file
        else:
            file_path = os.path.join(folder, file)
            try:
                df = read_csv_data(file_path)
                df.iloc[:, 1:] = df.iloc[:, 1:] / 1000  # Convert Wh to kWh
                data[category_name] = df
            except Exception as e:
                st.error(f"Error loading {file}: {e}")
    return data

# Function to plot total yearly energy for each category
def plot_yearly_energy(data: dict):
    """
    Plot total yearly energy consumption for each user category.
    """
    yearly_energy = {}
    for category, df in data.items():
        yearly_energy[category] = df.iloc[:, 1:].sum(axis=0) / 1000  # Sum energy in MWh for each year

    energy_df = pd.DataFrame(yearly_energy)
    energy_df.index = df.columns[1:]  # Set the years as index
    
    fig, ax = plt.subplots(figsize=(10, 6))
    energy_df.plot(kind='bar', ax=ax)
    ax.set_ylabel('Total Energy (MWh)')
    ax.set_title('Total Yearly Energy by User Category')
    st.pyplot(fig)

# Function to plot yearly profit with cumulative bar chart
def plot_yearly_profit(profit_data: pd.DataFrame, currency: str):
    """
    Plot yearly profit for each user category as a stacked bar chart.
    """
    fig, ax = plt.subplots(figsize=(10, 6))
    profit_data = profit_data / 1000  # Convert to kUSD
    profit_data.plot(kind='bar', stacked=True, ax=ax)
    ax.set_ylabel(f'Total Annual Profit - Actualized (k{currency})')
    ax.set_title('Yearly Profit by User Category - Actualized')
    st.pyplot(fig)

def calculate_actualized_profit(data: dict, tariff_settings: dict, discount_rate: float, time_horizon: int) -> pd.DataFrame:
    """
    Calculate the yearly actualized profit for each user category based on selected tariff settings and discount rate.
    Returns a DataFrame with actualized profit data for each category and year.
    """
    actualized_profit = pd.DataFrame()

    for category, df in data.items():
        energy = df.iloc[:, 1:].sum(axis=0)  # Total energy for each year in kWh
        years = df.columns[1:]  # Get year columns

        # Apply discount factors to actualize demand and profit
        discount_factors = [(1 / ((1 + discount_rate) ** year)) for year in range(1, time_horizon + 1)]

        # Calculate profit based on tariff model (without discounting yet)
        if tariff_settings[category]['type'] == 'consumption':
            tariff = tariff_settings[category]['value']
            profit = energy * tariff  # Raw profit
        
        elif tariff_settings[category]['type'] == 'fixed':
            tariff = tariff_settings[category]['value']
            profit = np.repeat(tariff * 12, len(years))  # Fixed monthly tariff multiplied by 12 for yearly profit
        
        elif tariff_settings[category]['type'] == 'threshold':
            fixed_value = tariff_settings[category]['fixed_value']
            threshold = tariff_settings[category]['threshold']
            consumption_tariff = tariff_settings[category]['consumption_tariff']

            monthly_energy = energy / 12  # Approximate monthly energy usage
            profit = np.where(monthly_energy <= threshold, 
                              fixed_value * 12, 
                              fixed_value * 12 + (monthly_energy - threshold) * 12 * consumption_tariff)

        actualized_profit[category] = profit * discount_factors[:len(profit)]  # Actualized profit

    actualized_profit.index = years
    return actualized_profit

# Main function to run the Streamlit app page for project profitability
def project_profitability():
    """Main function to calculate and display the project profitability page in Streamlit."""

    st.title("Mini-Grid Project Profitability")
    st.write("""
    In this page, you can calculate and visualize the total profit generated by mini-grids based on hourly load demand data 
    from different user categories. The application dynamically reads CSV files from the demand folder, allows users to 
    input tariffs for each category, and displays the resulting total and yearly profits.
    """)
    if st.session_state.aggregated_demand_flag is True:
        # Load user category data from the demand folder
        user_category_data = initialize_user_categories(PathManager.DEMAND_FOLDER_PATH)
        
        if not user_category_data:
            return  # If no data, exit the function

        # Plot total yearly energy
        plot_yearly_energy(user_category_data)

        currency = st.session_state.get('currency', 'USD')
        time_horizon = st.session_state.get("time_horizon", 20)
        discount_rate = st.session_state.get("discount_rate", 0.05)
        # Get the results from the model
        model: Model = st.session_state.model

        # Get the Net Present Cost (NPC) value from the model
        if model.get_settings('optimization_goal') == 0:
            npc_value = model.get_solution_variable('Net Present Cost').values.item() / 1000  # Convert to kUSD
        else:
            npc_value = calculate_actualized_investment_cost(model) / 1000  # Convert to kUSD

        st.write(f"Net Present Cost (NPC): {npc_value:,.2f} k{currency}")
        
        tariff_settings = {}
        
        st.header("Tariff Settings")
        tariff_models = ['Tariff per consumption', 'Fixed tariff', 'Fixed tariff up to threshold']

        # Dynamic input fields for tariffs
        for category in user_category_data.keys():
            st.subheader(f"{category}")
            tariff_type = st.selectbox(f"Select tariff model for {category}", tariff_models)
            
            if tariff_type == 'Tariff per consumption':
                tariff_value = st.number_input(f"Enter tariff per kWh for {category} ({currency}/kWh)", value=0.0)
                tariff_settings[category] = {'type': 'consumption', 'value': tariff_value}
            
            elif tariff_type == 'Fixed tariff':
                fixed_value = st.number_input(f"Enter fixed tariff for {category} ({currency}/month)", value=0.0)
                tariff_settings[category] = {'type': 'fixed', 'value': fixed_value}
            
            elif tariff_type == 'Fixed tariff up to threshold':
                fixed_value = st.number_input(f"Enter fixed tariff for {category} ({currency}/month)", value=0.0)
                threshold = st.number_input(f"Enter energy threshold for {category} (kWh/month)", value=0.0)
                consumption_tariff = st.number_input(f"Tariff per kWh after threshold ({currency}/kWh)", value=0.0)
                tariff_settings[category] = {
                    'type': 'threshold',
                    'fixed_value': fixed_value,
                    'threshold': threshold,
                    'consumption_tariff': consumption_tariff
                }

        # Profit calculation section
        actualized_profit_data = calculate_actualized_profit(user_category_data, tariff_settings, discount_rate, time_horizon)
        st.write(f"Actualized Profit Data (k{currency})")
        st.table(actualized_profit_data)

        # Calculate total actualized profit in kUSD
        total_actualized_profit = actualized_profit_data.sum().sum() / 1000  # Convert to kUSD

        # Calculate payback period
        payback_period = (npc_value / total_actualized_profit) * time_horizon


        # Display total actualized profit and payback period
        st.header("Profit Analysis Visualization")
        # Display main metrics
        col1, col2 = st.columns(2)
        with col1:
            st.metric(label=f"Total Actualized Profit over {time_horizon} years", value=f"{total_actualized_profit:,.2f} k{currency}")
        with col2:
            st.metric(label="Payback Period", value=f"{payback_period:.2f} years")
        
        # Visualization section
        plot_yearly_profit(actualized_profit_data, currency)
    else:
        st.warning("To calculate project profitability with different tariffs, you need to provide demand data for various user categories. Please edit the load demand assessment section to include this data.")

    st.write("---")  # Add a separator

    if st.button("Back"):
        st.session_state.page = "Results"
        st.rerun()